tags:
  - User
summary: Update an existing user by ID (full replacement)
description: Updates all fields of an existing user. All fields are expected in the request body, even if unchanged.
consumes:
  - application/json
produces:
  - application/json
parameters:
  - in: path
    name: user_id
    type: string
    required: true
    description: "ID of the user to update"
    format: "uuid"
    example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
  - in: body
    name: body
    description: User object with updated fields. All fields are expected even if unchanged.
    required: true
    schema:
      type: object
      properties:
        user_name:
          type: string
          description: "Updated username for the user"
          example: "janedoe"
        password:
          type: string
          description: "Updated password (should be hashed in production)"
          format: "password"
          example: "newsecurepassword456"
        email:
          type: string
          description: "Updated email address of the user"
          format: "email"
          example: "jane.doe@example.com"
        mobile:
          type: string
          description: "Updated mobile number of the user"
          example: "0987654321"
        gender:
          type: string
          description: "Updated gender of the user"
          enum: ["Male", "Female", "Other", "Prefer not to say"]
          example: "Female"
        dob:
          type: string
          description: "Updated date of birth in YYYY-MM-DD format (can be null)"
          format: "date"
          example: "1992-05-20"
          x-nullable: true
responses:
  200:
    description: User updated successfully
    schema:
      type: object
      properties:
        message:
          type: string
          example: "User updated successfully"
        status:
          type: string
          example: "success"
        user:
          type: object
          properties:
            user_id:
              type: string
              format: "uuid"
              description: "Unique identifier for the user"
              example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
            user_name:
              type: string
              description: "Username of the user"
              example: "janedoe"
            email:
              type: string
              description: "Email address of the user"
              format: "email"
              example: "jane.doe@example.com"
            mobile:
              type: string
              description: "Mobile number of the user"
              example: "0987654321"
            gender:
              type: string
              description: "Gender of the user"
              example: "Female"
            dob:
              type: string
              description: "Date of birth in YYYY-MM-DD format"
              format: "date"
              example: "1992-05-20"
  400:
    description: Bad Request - Invalid date format
    schema:
      type: object
      properties:
        error:
          type: string
          example: "Invalid date format. Use YYYY-MM-DD"
        status:
          type: string
          example: "fail"
  404:
    description: User not found
    schema:
      type: object
      properties:
        error:
          type: string
          example: "User not found"
        status:
          type: string
          example: "fail"
  409:
    description: Conflict - Email, mobile, or username already exists
    schema:
      type: object
      properties:
        error:
          type: string
          example: "Email already exists"
        status:
          type: string
          example: "fail"
  500:
    description: Internal Server Error
    schema:
      type: object
      properties:
        error:
          type: string
          example: "Error updating user: Some internal server issue"
        status:
          type: string
          example: "fail"
